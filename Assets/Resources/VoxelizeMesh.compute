#pragma kernel VoxelizeMesh

struct Triangle
{
    float3 a, b, c;
};

struct AABB
{
    float3 center;
    float3 extents;
};

RWStructuredBuffer<float4> _VoxelGridPoints;
StructuredBuffer<float3> _MeshVertices;
StructuredBuffer<int> _MeshTriangleIndices;

int _TriangleCount;

float4 _BoundsMin;
float4x4 _LocalToWorld;

float4 _CellHalfSize;
int _GridWidth;
int _GridHeight;
int _GridDepth;

//https://gdbooks.gitbooks.io/3dcollisions/content/Chapter4/aabb-triangle.html
bool IntersectsTriangleAabbSat(float3 v0, float3 v1, float3 v2, float3 aabbExtents, float3 axis)
{
    float p0 = dot(v0, axis);
    float p1 = dot(v1, axis);
    float p2 = dot(v2, axis);

    float r = aabbExtents.x * abs(dot(float3(1, 0, 0), axis)) +
        aabbExtents.y * abs(dot(float3(0, 1, 0), axis)) +
        aabbExtents.z * abs(dot(float3(0, 0, 1), axis));

    float maxP = max(p0, max(p1, p2));
    float minP = min(p0, min(p1, p2));

    return !(max(-maxP, minP) > r);
}

//https://gdbooks.gitbooks.io/3dcollisions/content/Chapter4/aabb-triangle.html
bool IntersectsTriangleAabb(Triangle tri, AABB aabb)
{
    tri.a -= aabb.center;
    tri.b -= aabb.center;
    tri.c -= aabb.center;

    float3 ab = normalize(tri.b - tri.a);
    float3 bc = normalize(tri.c - tri.b);
    float3 ca = normalize(tri.a - tri.c);

    //Cross ab, bc, and ca with (1, 0, 0)
    float3 a00 = float3(0.0, -ab.z, ab.y);
    float3 a01 = float3(0.0, -bc.z, bc.y);
    float3 a02 = float3(0.0, -ca.z, ca.y);

    //Cross ab, bc, and ca with (0, 1, 0)
    float3 a10 = float3(ab.z, 0.0, -ab.x);
    float3 a11 = float3(bc.z, 0.0, -bc.x);
    float3 a12 = float3(ca.z, 0.0, -ca.x);

    //Cross ab, bc, and ca with (0, 0, 1)
    float3 a20 = float3(-ab.y, ab.x, 0.0);
    float3 a21 = float3(-bc.y, bc.x, 0.0);
    float3 a22 = float3(-ca.y, ca.x, 0.0);

    if (
        !IntersectsTriangleAabbSat(tri.a, tri.b, tri.c, aabb.extents, a00) ||
        !IntersectsTriangleAabbSat(tri.a, tri.b, tri.c, aabb.extents, a01) ||
        !IntersectsTriangleAabbSat(tri.a, tri.b, tri.c, aabb.extents, a02) ||
        !IntersectsTriangleAabbSat(tri.a, tri.b, tri.c, aabb.extents, a10) ||
        !IntersectsTriangleAabbSat(tri.a, tri.b, tri.c, aabb.extents, a11) ||
        !IntersectsTriangleAabbSat(tri.a, tri.b, tri.c, aabb.extents, a12) ||
        !IntersectsTriangleAabbSat(tri.a, tri.b, tri.c, aabb.extents, a20) ||
        !IntersectsTriangleAabbSat(tri.a, tri.b, tri.c, aabb.extents, a21) ||
        !IntersectsTriangleAabbSat(tri.a, tri.b, tri.c, aabb.extents, a22) ||
        !IntersectsTriangleAabbSat(tri.a, tri.b, tri.c, aabb.extents, float3(1, 0, 0)) ||
        !IntersectsTriangleAabbSat(tri.a, tri.b, tri.c, aabb.extents, float3(0, 1, 0)) ||
        !IntersectsTriangleAabbSat(tri.a, tri.b, tri.c, aabb.extents, float3(0, 0, 1)) ||
        !IntersectsTriangleAabbSat(tri.a, tri.b, tri.c, aabb.extents, cross(ab, bc))
    )
    {
        return false;
    }

    return true;
}

[numthreads(4,4,4)]
void VoxelizeMesh(int3 id : SV_DispatchThreadID)
{
    if (id.x >= _GridWidth || id.y >= _GridHeight || id.z >= _GridDepth) return;

    const float3 cellSize = _CellHalfSize.xyz * 2.0;

    const float3 centerPos = float3(id.x * cellSize.x + _CellHalfSize.x + _BoundsMin.x,
                                    id.y * cellSize.y + _CellHalfSize.y + _BoundsMin.y,
                                    id.z * cellSize.z + _CellHalfSize.z + _BoundsMin.z);

    AABB aabb;
    aabb.center = centerPos.xyz;
    aabb.extents = _CellHalfSize.xyz;

    // Check if this voxel is overlap with any triangles
    // If overlap, then this voxel is valid
    bool intersects = false;
    for (int i = 0; i < _TriangleCount; i += 3)
    {
        Triangle tri;
        tri.a = mul(_LocalToWorld, float4(_MeshVertices[_MeshTriangleIndices[i]], 1.0)).xyz;
        tri.b = mul(_LocalToWorld, float4(_MeshVertices[_MeshTriangleIndices[i + 1]], 1.0)).xyz;
        tri.c = mul(_LocalToWorld, float4(_MeshVertices[_MeshTriangleIndices[i + 2]], 1.0)).xyz;
        intersects = IntersectsTriangleAabb(tri, aabb);

        if (intersects)
            break;
    }

    // If valid, set w component to 1, else 0
    float w = intersects ? 1.0 : 0.0;
    _VoxelGridPoints[id.x + _GridWidth * (id.y + _GridHeight * id.z)] = float4(centerPos, w);
}
