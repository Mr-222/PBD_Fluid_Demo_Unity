#include "SmoothingKernel.hlsl"

#define THREADS 128
#define PI 3.14159265359

RWStructuredBuffer<float4> FluidPositions;
StructuredBuffer<float4> PredictedPositionsRead;
RWStructuredBuffer<float4> PredictedPositionsWrite;
StructuredBuffer<float4> BoundaryPositions;
StructuredBuffer<float4> VelocitiesRead;
RWStructuredBuffer<float4> VelocitiesWrite;
RWStructuredBuffer<float> Densities;
RWStructuredBuffer<float> Lambdas;

float3 Gravity;
float DeltaTime;
float RestDensity;
float Viscosity;
float Mass;
int NumFluidParticles;
int NumBoundaryParticles;
float Psi;

float Epsilon; // Relaxation parameter

// Surface tension parameters
float K;
float N;

// vorticity confinement
RWStructuredBuffer<float4> VorticitiesWrite;
StructuredBuffer<float4> VorticitiesRead;
float Vorticity;

// Fast neighbor search
int NumTotalParticles;
float3 GridBoundsMin;
float3 GridDimension;
float CellSize;

StructuredBuffer<int> BinCountsScanned; // Inclusive scan
StructuredBuffer<int> ParticleIndices;

int CellId(float3 positions)
{
    positions -= GridBoundsMin;
    int3 coord = floor(positions / CellSize);
    return coord.x + coord.y * GridDimension.x + coord.z * GridDimension.x * GridDimension.y;
}

// [start, end) in particle index array
int2 FindParticlesInCell(int cellId)
{
    int2 bounds = int2(0, 0);
    if (cellId == 0)
        bounds.x = 0;
    else
        bounds.x = BinCountsScanned[cellId - 1];
    bounds.y = BinCountsScanned[cellId];

    return bounds;
}

#pragma kernel PredictPositions
[numthreads(THREADS, 1, 1)]
void PredictPositions(int id : SV_DispatchThreadID)
{
    if (id < NumFluidParticles)
    {
        float3 velocity = VelocitiesRead[id].xyz;
        velocity += DeltaTime * Gravity;
        float3 position = FluidPositions[id].xyz + DeltaTime * velocity;
        
        PredictedPositionsWrite[id] = float4(position, 0);
    }
}

void ComputeDensityAndLambda(int id, float3 pi, out float density, out float lambda)
{
    float InvDensity = 1.0f / RestDensity;
    float MassInvDensity = Mass * InvDensity;

    //density = Mass * Poly6Zero;
    density = 0;
    lambda = 0;

    float sum_grad_C2 = 0;
    float3 grad_Ci = float3(0, 0, 0);

    // for (int j = 0; j < NumFluidParticles; ++j)
    // {
    //     float3 pj = PredictedPositionsRead[j].xyz;
    //     float3 diff = pi - pj;
    //     float r = length(diff);
    //
    //     if (r > KernelRadius || j == id)
    //         continue;
    //
    //     density += Mass * Poly6Kernel(r);
    //     float3 grad_Cj = -MassInvDensity * SpikyGradKernel(diff, r);
    //     sum_grad_C2 += dot(grad_Cj, grad_Cj);
    //     grad_Ci -= grad_Cj;
    // }
    //
    // for (int k = 0; k < NumBoundaryParticles; ++k)
    // {
    //     float3 pj = BoundaryPositions[k].xyz;
    //     float3 diff = pi - pj;
    //     float r = length(diff);
    //
    //     if (r > KernelRadius)
    //         continue;
    //
    //     density += Psi * Poly6Kernel(r);
    //     float3 grad_Cj = -Psi * InvDensity * SpikyGradKernel(diff, r);
    //     sum_grad_C2 += dot(grad_Cj, grad_Cj);
    //     grad_Ci -= grad_Cj;
    // }

    int cellId = CellId(pi);
    [unroll]
    for (int k = -1; k <= 1; ++k)
    {
        for (int j = -1; j <= 1; ++j)
        {
            for (int i = -1; i <= 1; ++i)
            {
                int neighborCellId = cellId + i + j * GridDimension.x + k * GridDimension.x * GridDimension.y;
                int2 bounds = FindParticlesInCell(neighborCellId);
                for (int idx = bounds.x; idx < bounds.y; ++idx)
                {
                    int neighborId = ParticleIndices[idx];
                    if (id == neighborId)
                        continue;

                    if (neighborId < NumFluidParticles)
                    {
                        float3 pj = PredictedPositionsRead[neighborId].xyz;
                        float3 diff = pi - pj;
                        float r = length(diff);
                        
                        if (r > KernelRadius)
                            continue;
                        
                        density += Mass * Poly6Kernel(r);
                        float3 grad_Cj = -MassInvDensity * SpikyGradKernel(diff, r);
                        sum_grad_C2 += dot(grad_Cj, grad_Cj);
                        grad_Ci -= grad_Cj;
                    }
                    else
                    {
                        float3 pj = BoundaryPositions[neighborId - NumFluidParticles].xyz;
                        float3 diff = pi - pj;
                        float r = length(diff);
                        
                        if (r > KernelRadius)
                            continue;
                        
                        density += Psi * Poly6Kernel(r);
                        float3 grad_Cj = -Psi * InvDensity * SpikyGradKernel(diff, r);
                        sum_grad_C2 += dot(grad_Cj, grad_Cj);
                        grad_Ci -= grad_Cj;
                    }
                }
            }
        }
    }

    float C = density * InvDensity - 1.0f;
    // Only compute lambda if the particle denser than the rest density, so that the fluid doesn't compress
    // C > 0 for 60% - 65% of particles
    if (C > 0)
    {
        sum_grad_C2 += dot(grad_Ci, grad_Ci);

        // If the fluid is collapsing you need to adjust e.
        // Its a user specified relaxation parameter that 
        // needs to be added to stabilze the pressure
        // due to a vanishing gradient at the smoothing 
        // kernel borders. The value may need to increase
        // as the number of particles increase.
        lambda = -C / (sum_grad_C2 + Epsilon);
    }
}

#pragma kernel ComputeLambda
[numthreads(THREADS, 1, 1)]
void ComputeLambda(int id : SV_DispatchThreadID)
{
    if (id < NumFluidParticles)
    {
        float3 pi = PredictedPositionsRead[id].xyz;
        
        float density = 0;
        float lambda = 0;
        ComputeDensityAndLambda(id, pi, density, lambda);
        
        Densities[id] = density;
        Lambdas[id] = lambda;
    }
}

float3 PositionCorrection(int id, float3 pi, float lambda_i)
{
    float3 delta_p = float3(0, 0, 0);
    float InvDensity = 1.0f / RestDensity;
    float MassInvDensity = Mass * InvDensity;

    // for (int j = 0; j < NumFluidParticles; ++j)
    // {
    //     float3 pj = PredictedPositionsRead[j].xyz;
    //     float3 diff = pi - pj;
    //     float r = length(diff);
    //
    //     if (r > KernelRadius || j == id)
    //         continue;
    //
    //     float3 gradW = SpikyGradKernel(diff, r);
    //     delta_p += (lambda_i + Lambdas[j]) * MassInvDensity * gradW;
    // }
    //
    // for (int k = 0; k < NumBoundaryParticles; ++k)
    // {
    //     float3 pj = BoundaryPositions[k].xyz;
    //     float3 diff = pi - pj;
    //     float r = length(diff);
    //
    //     if (r > KernelRadius)
    //         continue;
    //
    //     float3 gradW = SpikyGradKernel(diff, r);
    //     delta_p += lambda_i * Psi * InvDensity * gradW;
    // }

    int cellId = CellId(pi);
    [unroll]
    for (int k = -1; k <= 1; ++k)
    {
        [unroll]
        for (int j = -1; j <= 1; ++j)
        {
            [unroll]
            for (int i = -1; i <= 1; ++i)
            {
                int neighborCellId = cellId + i + j * GridDimension.x + k * GridDimension.x * GridDimension.y;
                int2 bounds = FindParticlesInCell(neighborCellId);
                for (int idx = bounds.x; idx < bounds.y; idx++)
                {
                    int neighborId = ParticleIndices[idx];
                    if (id == neighborId)
                        continue;
                    
                    if (neighborId < NumFluidParticles)
                    {
                        float3 pj = PredictedPositionsRead[neighborId].xyz;
                        float3 diff = pi - pj;
                        float r = length(diff);
                        
                        if (r > KernelRadius)
                            continue;
                        
                        // Surface tension, Chapter 4
                        //float delta_q = 0 * KernelRadius;
                        float corr = -K * pow(Poly6Kernel(r) / Poly6Zero, N);
                        
                        float3 gradW = SpikyGradKernel(diff, r);
                        delta_p += (lambda_i + Lambdas[neighborId] + corr) * MassInvDensity * gradW;
                    }
                    else
                    {
                        float3 pj = BoundaryPositions[neighborId - NumFluidParticles].xyz;
                        float3 diff = pi - pj;
                        float r = length(diff);
                        
                        if (r > KernelRadius)
                            continue;
                        
                        float3 gradW = SpikyGradKernel(diff, r);
                        delta_p += lambda_i * Psi * InvDensity * gradW;
                    }
                }
            }
        }
    }

    return delta_p;
}

#pragma kernel SolveConstraint
[numthreads(THREADS, 1, 1)]
void SolveConstraint(int id : SV_DispatchThreadID)
{
    if (id < NumFluidParticles)
    {
        float3 pi = PredictedPositionsRead[id].xyz;
        float lambda_i = Lambdas[id];

        pi += PositionCorrection(id, pi, lambda_i);

        PredictedPositionsWrite[id] = float4(pi, 0);
    }
}

#pragma kernel UpdateVelocities
[numthreads(THREADS, 1, 1)]
void UpdateVelocities(int id : SV_DispatchThreadID)
{
    if (id < NumFluidParticles)
    {
        float3 pi = FluidPositions[id].xyz;
        float3 pi_new = PredictedPositionsRead[id].xyz;
        float3 velocity = (pi_new - pi) / DeltaTime;

        VelocitiesWrite[id] = float4(velocity, 0);
    }
}

#pragma kernel SolveViscosity
[numthreads(THREADS, 1, 1)]
void SolveViscosity(int id : SV_DispatchThreadID)
{
    if (id < NumFluidParticles)
    {
        float3 pi = PredictedPositionsRead[id].xyz;
        float3 velocity = VelocitiesRead[id].xyz;
        
        // for (int j = 0; j < NumFluidParticles; ++j)
        // {
        //     float3 pj = PredictedPositionsRead[j].xyz;
        //     float3 vj = VelocitiesRead[j].xyz;
        //     float3 diff = pi - pj;
        //     float r = length(diff);
        //
        //     if (r > KernelRadius || j == id)
        //         continue;
        //
        //     velocity += Viscosity * (vj - velocity) * ViscLapKernel(r);
        // }

        float3 vorticity = float3(0, 0, 0);
        int cellId = CellId(pi);
        [unroll]
        for (int k = -1; k <= 1; k++)
        {
            [unroll]
            for (int j = -1; j <= 1; j++)
            {
                [unroll]
                for (int i = -1; i <= 1; i++)
                {
                    int neighorCellId = cellId + i + j * GridDimension.x + k * GridDimension.x * GridDimension.y;
                    int2 bounds = FindParticlesInCell(neighorCellId);
                    for (int idx = bounds.x; idx < bounds.y; idx++)
                    {
                        int neighborId = ParticleIndices[idx];
                        if (id == neighborId)
                            continue;

                        if (neighborId < NumFluidParticles)
                        {
                            float3 pj = PredictedPositionsRead[neighborId].xyz;
                            float3 vj = VelocitiesRead[neighborId].xyz;
                            float3 diff = pi - pj;
                            float r = length(diff);
                        
                            if (r >= KernelRadius)
                                continue;

                            float3 v_ij = vj - velocity;
                            velocity += Viscosity * v_ij * ViscLapKernel(r);
                        
                            vorticity += cross(v_ij, SpikyGradKernel(diff, r));   
                        }
                        else
                        {
                            float3 pj = BoundaryPositions[neighborId - NumFluidParticles].xyz;
                            float3 vj = float3(0, 0, 0);
                            float3 diff = pi - pj;
                            float r = length(diff);
                        
                            if (r >= KernelRadius)
                                continue;

                            float3 v_ij = vj - velocity;
                            vorticity += cross(v_ij, SpikyGradKernel(diff, r));
                        }
                    }
                }
            }
        }

        VorticitiesWrite[id] = float4(vorticity, 0);
        VelocitiesWrite[id] = float4(velocity, 0);
    }
}

#pragma kernel SolveVorticity
[numthreads(THREADS, 1, 1)]
void SolveVorticity(int id : SV_DispatchThreadID)
{
    if (id < NumFluidParticles)
    {
        float InvDensity = 1.0f / RestDensity;
        float MassInvDensity = Mass * InvDensity;
        
        float3 pi = PredictedPositionsRead[id];
        float3 vorticity_i = VorticitiesRead[id];
        
        float3 eta = float3(0, 0, 0);
        int cellId = CellId(pi);
        [unroll]
        for (int k = -1; k <= 1; k++)
        {
            [unroll]
            for (int j = -1; j <= 1; j++)
            {
                [unroll]
                for (int i = -1; i <= 1; i++)
                {
                    int neighorCellId = cellId + i + j * GridDimension.x + k * GridDimension.x * GridDimension.y;
                    int2 bounds = FindParticlesInCell(neighorCellId);
                    for (int idx = bounds.x; idx < bounds.y; idx++)
                    {
                        int neighborId = ParticleIndices[idx];
                        if (id == neighborId)
                            continue;

                        if (neighborId < NumFluidParticles)
                        {
                            float3 pj = PredictedPositionsRead[neighborId].xyz;
                            float3 diff = pi - pj;
                            float r = length(diff);
                                
                            if (r >= KernelRadius)
                                continue;

                            // Vorticity confinement
                            eta += MassInvDensity * length(VorticitiesRead[neighborId]) * SpikyGradKernel(diff, r);
                        }
                        else
                        {
                            // float3 pj = BoundaryPositions[neighborId - NumFluidParticles].xyz;
                            // float3 diff = pi - pj;
                            // float r = length(diff);
                            //     
                            // if (r >= KernelRadius)
                            //     continue;
                            //
                            // // Vorticity confinement
                            // eta += Psi * InvDensity * length(VorticitiesRead[neighborId]) * SpikyGradKernel(diff, r);
                        }
                    }
                }
            }
        }

        // Vorticity confinement
        float3 force = float3(0, 0, 0);
        if (length(vorticity_i) != 0 && length(eta) != 0)
        {
            float3 N = normalize(eta);
            force = Vorticity * cross(N, vorticity_i);
        }

        float3 velocity = VelocitiesRead[id];
        VelocitiesWrite[id] = float4(velocity + DeltaTime * force, 0);
    }
}

#pragma kernel UpdatePositions
[numthreads(THREADS, 1, 1)]
void UpdatePositions(int id : SV_DispatchThreadID)
{
    if (id < NumFluidParticles)
    {
        FluidPositions[id] = PredictedPositionsRead[id];
    }
}