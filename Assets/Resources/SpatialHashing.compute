// Fast neighbor search
// https://drive.google.com/file/d/1j5Lu3G80BgsSRyEjEBc4y5klSip1eil6/view
// https://on-demand.gputechconf.com/gtc/2014/presentations/S4117-fast-fixed-radius-nearest-neighbor-gpu.pdf

#define THREADS 512

int NumTotalParticles;
int NumFluidParticles;
int NumBins;
float3 GridBoundsMin;
float3 GridDimension;
float CellSize;

StructuredBuffer<float4> FluidPositions;
StructuredBuffer<float4> BoundaryPositions;
RWStructuredBuffer<int> BinCounts;
StructuredBuffer<int> BinCountsScanned; // Inclusive scan
RWStructuredBuffer<int> ParticleIndicesWrite;

int CellId(float3 positions)
{
    positions -= GridBoundsMin;
    int3 coord = floor(positions / CellSize);
    return coord.x + coord.y * GridDimension.x + coord.z * GridDimension.x * GridDimension.y; 
}

#pragma kernel FillZeroes
[numthreads(THREADS, 1, 1)]
void FillZeroes(int id : SV_DispatchThreadID)
{
    if (id < NumBins)
        BinCounts[id] = 0;
}

#pragma kernel Count
[numthreads(THREADS, 1, 1)]
void Count(int id : SV_DispatchThreadID)
{
    if (id < NumTotalParticles)
    {
        float3 position = float3(0, 0, 0);
        if (id < NumFluidParticles)
            position = FluidPositions[id].xyz;
        else
            position = BoundaryPositions[id - NumFluidParticles].xyz;
        
        int cellId = CellId(position);
        InterlockedAdd(BinCounts[cellId], 1);
    }
}

#pragma kernel Sort
[numthreads(THREADS, 1, 1)]
void Sort(int id : SV_DispatchThreadID)
{
    if (id < NumTotalParticles)
    {
        float3 position = float3(0, 0, 0);
        if (id < NumFluidParticles)
            position = FluidPositions[id].xyz;
        else
            position = BoundaryPositions[id - NumFluidParticles].xyz;
        
        int cellId = CellId(position);

        // BinCountsScanned is the result of inclusive scan
        int CellRemain = 0;
        InterlockedAdd(BinCounts[cellId], -1, CellRemain);
        int idx = BinCountsScanned[cellId] - CellRemain;

        ParticleIndicesWrite[idx] = id;
    }
}